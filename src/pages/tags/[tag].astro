---
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getCollection } from "astro:content";
import BlogFeed from '../../components/feed/BlogFeed.astro';
import Sections from '../../components/feed/Sections.astro';
import SectionItem from '../../components/feed/SectionItem.astro';

//importing button styles for "tag" heading
import '../../styles/buttons.css';
import BackTo from '../../components/navigation/BackTo.astro';

export async function getStaticPaths() {
  const allPosts = await getCollection("blog");
  const allProjects = await getCollection("projects");

  const blogTags = allPosts.flatMap((post: any) => post.data.tags ?? []);
  const projectTags = allProjects.flatMap((item: any) => item.data.tags ?? []);
  const uniqueTags = [...new Set([...blogTags, ...projectTags])];

  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post: any) => (post.data.tags ?? []).includes(tag));
    const filteredProjects = allProjects.filter((item: any) => (item.data.tags ?? []).includes(tag));

    return {
      params: { tag },
      props: { posts: filteredPosts, projects: filteredProjects },
    };
  });
}

const { tag } = Astro.params;
const { posts = [], projects = [] } = Astro.props as { posts?: any[]; projects?: any[] };
// For top-level project titles, look up the full projects collection
const allProjects = await getCollection('projects');

// Prepare blog items sorted by pubDate DESC
const blogItems = posts
  .map((post: any) => ({
    url: `/blog/${post.id}/`,
    title: post.data.title,
    pubDate: post.data.pubDate,
    description: post.data.description
  }))
  .sort((a, b) => {
    const da = (a.pubDate as any)?.getTime?.() ?? new Date(a.pubDate as any).getTime?.() ?? 0;
    const db = (b.pubDate as any)?.getTime?.() ?? new Date(b.pubDate as any).getTime?.() ?? 0;
    return db - da;
  });

// Group project entries by top-level segment and map to Sections items
type GroupMap = Record<string, any[]>;
const grouped: GroupMap = {};
for (const item of projects) {
  const top = (item.slug as string)?.split('/')?.[0] ?? item.slug;
  if (!grouped[top]) grouped[top] = [];

  //check if the item is not the top-level project itself
  if (item.slug === top) continue;
  grouped[top].push(item);
}

const projectGroups = Object.entries(grouped)
  .sort(([a], [b]) => a.localeCompare(b, undefined, { sensitivity: 'base' }));

const topTitle = (top: string) => allProjects.find(p => p.slug === top)?.data?.title ?? top;
const topDesc = (top: string) => allProjects.find(p => p.slug === top)?.data?.description ?? '';
---
<style>
  .blog-posts, .project-posts {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  h2 { margin-top: 1.25rem; }
  /* separator before each project group */
  .project-posts {
    border-top: none;

    margin-top: var(--space-4);
  }
  .project-posts ~ .project-posts {
    border-top: var(--border-1) solid var(--border);
    padding-top: var(--space-2);
  }
  .blog-posts {

    /* border-bottom: var(--border-1) solid var(--border); */
    margin-top: var(--space-4);
  
  }

  .tag {
    padding: 0rem 0.85rem;
    border: 4px solid var(--border);
    
  }
  h3, h3 a {
    color: var(--text-muted);
  }

  /*Solid thick line before heading 2 */
  h2 {
    border-top: 4px solid var(--border);
    padding-top: 0.25rem;
    margin-top: var(--space-2);
    padding-bottom: 0;
    margin-bottom: 1rem;
  }
  h2 a {
    text-decoration: none;
    color: var(--text);
  }
  .backto {
    margin-top: 2rem;
    margin-bottom: -1rem;
  }

  

</style>


<BaseLayout >
  <h1 class="tag">#{tag}</h1>
  {blogItems.length > 0 && (
    <div class="blog-posts">
      <h2><a href={`/blog`}>Blog posts</a></h2>
      <BlogFeed items={blogItems} />
    </div>
  )}
  
  {projectGroups.length > 0 && (
    <>
      <h2><a href={`/projects`}>Project pages</a></h2>
      
      {projectGroups.map(([top, items]) => (
        
      <div class="project-posts">
        {items.length > 0 ? (
          <h3>From <a href={`/projects/${top}/`}>{topTitle(top)}</a>:</h3>
          <Sections items={items.map((it: any) => ({
            url: `/projects/${it.slug}/`,
            title: it.data.title,
            pubDate: it.data.pubDate,
            description: it.data.description
          }))} />
        ) : (
          <SectionItem url={`/projects/${top}/`} title={topTitle(top)} />
        )}
      </div>
    ))}
  </>
  )}
  <div class="backto">
  <BackTo href="/tags/" label="Tags" />
  </div>
</BaseLayout>