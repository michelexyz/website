---
import { getCollection } from "astro:content";
import BaseLayout from "../../../layouts/BaseLayout.astro";

import type { ImageMetadata } from 'astro';
import { Image } from "astro:assets";
import BackTo from "../../../components/navigation/BackTo.astro";

export async function getStaticPaths() {
  const albums = await getCollection("albums");

  const paths = Object.values(albums).map((album) => {
    return {
      params: {
        id: album.id,
      },
      props: {
        album,
      },
    };
  });

  return paths;
}

const { album } = Astro.props;

// get paths with matching album folder name "/src/content/albums/[album-name]/*.{jpeg,jpg}"
const albumId = album.id; // e.g. "japan"
//print albumId to console
console.log("Album ID:", albumId);

// get the paths
const imageModules = import.meta.glob<{ default: ImageMetadata }>(
  `../../../content/albums/*/*.{jpeg,jpg,png}`,
  { eager: true }
);

// filter the images that belong to the current album
const filteredImageModules = Object.fromEntries(
  Object.entries(imageModules).filter(([key]) => key.includes(`/albums/${albumId}/`))
);

const resolvedImages = Object.values(filteredImageModules).map((mod) => mod.default);

const numberCaptionMap = new Map();
if (album.data.captions) {
  for (const item of album.data.captions) {
    numberCaptionMap.set(item.imagenr, item.caption);
  }
}

---

<BaseLayout pageTitle={album.data.title}>
  <div>
  
    <p>
    {album.data.description}
  </p>

  <div class="album-stream">
    {resolvedImages.map((image, index) => (
      <figure class="photo" tabindex="0" role="button" aria-label="Open image" >
        <Image src={image} alt={numberCaptionMap.get(index + 1) ?? `${album.data.title} #${index + 1}`} />
        {numberCaptionMap.has(index + 1) && (
          <figcaption>{numberCaptionMap.get(index + 1)}</figcaption>
        )}
      </figure>
    ))}
  </div>

  <!-- Lightbox overlay -->
  <div class="lightbox" data-open="false" aria-hidden="true" role="dialog" aria-modal="true">
    <div class="lightbox-backdrop" data-close></div>
    <div class="lightbox-content">
      <button class="lightbox-close" aria-label="Close" data-close>×</button>
      <img class="lightbox-img" alt="" />
      <p class="lightbox-caption"></p>
    </div>
    <button class="lightbox-arrow prev" aria-label="Previous image" data-prev>‹</button>
    <button class="lightbox-arrow next" aria-label="Next image" data-next>›</button>
  </div>

  <p>
    <BackTo href="/others/gallery/" label="Gallery" />
  </p>
</div>

<style>
  .album-stream { display: flex; flex-direction: column; gap: var(--space-7); justify-content: center;}
  .photo { margin: 0; cursor: zoom-in; }
  .photo :global(img) { display: block; height: auto; max-width: min(720px, 100%); border: 2px solid var(--border); background: var(--card-bg); }
  figcaption { margin-top: var(--space-2); color: var(--text-muted); font-size: var(--font-2); }

  /* Lightbox styles */
  .lightbox {
    position: fixed; inset: 0; display: none; align-items: center; justify-content: center;
    background: rgba(0,0,0,0.5);
    padding: var(--space-4);
    z-index: 1000;
  }
  .lightbox[data-open="true"] { display: flex; }
  .lightbox-backdrop { position: absolute; inset: 0; }
  .lightbox-content { position: relative; background: var(--card-bg); border: 2px solid var(--border); padding: var(--space-2); max-width: 90vw; max-height: 90vh; display: flex; flex-direction: column; }
  .lightbox-img { max-width: 95vw; max-height: 80vh; object-fit: contain; background: var(--card-bg); border: 2px solid var(--border); }
  .lightbox-caption { margin-top: var(--space-3); color: var(--text-muted); font-size: var(--font-2); }
  .lightbox-close { position: absolute; top: var(--space-2); right: var(--space-2); background: var(--bg); color: var(--text); border: 2px solid var(--border); border-radius: 0; padding: 0.25rem 0.5rem; cursor: pointer; }
  .lightbox-arrow { position: absolute; top: 50%; transform: translateY(-50%); background: var(--bg); color: var(--text); border: 2px solid var(--border); border-radius: 0; padding: var(--space-3); cursor: pointer; z-index: 1001; }
  .lightbox-arrow.prev { left: var(--space-2); }
  .lightbox-arrow.next { right: var(--space-2); }

  /* Fullscreen tuning
  .lightbox:fullscreen { padding: 0; background: rgba(0,0,0,0.95); }
  .lightbox:fullscreen .lightbox-content { background: transparent; border: 0; padding: 0; max-width: 100vw; max-height: 100vh; }
  .lightbox:fullscreen .lightbox-img { max-width: 100vw; max-height: 100vh; }
  Safari 
  .lightbox:-webkit-full-screen { padding: 0; background: rgba(0,0,0,0.95); }
  .lightbox:-webkit-full-screen .lightbox-content { background: transparent; border: 0; padding: 0; max-width: 100vw; max-height: 100vh; }
  .lightbox:-webkit-full-screen .lightbox-img { max-width: 100vw; max-height: 100vh; } */
</style>

<script is:inline>
  // Simple lightbox behavior
  const overlay = document.querySelector('.lightbox');
  const overlayImg = overlay?.querySelector('.lightbox-img');
  const overlayCaption = overlay?.querySelector('.lightbox-caption');
  const closeEls = overlay?.querySelectorAll('[data-close]');
  const prevBtn = overlay?.querySelector('[data-prev]');
  const nextBtn = overlay?.querySelector('[data-next]');
  const figures = Array.from(document.querySelectorAll('.album-stream figure.photo'));
  let currentIndex = -1;

  function showIndex(idx) {
    if (!overlay || !overlayImg) return;
    const max = figures.length - 1;
    if (idx < 0) idx = 0; else if (idx > max) idx = max;// clamp to bounds
    const fig = figures[idx];
    if (!fig) return;
    const img = fig.querySelector('img');
    const capEl = fig.querySelector('figcaption');
    const captionText = capEl ? (capEl.textContent || '') : '';
    if (img) {
      overlayImg.setAttribute('src', img.getAttribute('src') || '');
      const srcset = img.getAttribute('srcset');
      if (srcset) overlayImg.setAttribute('srcset', srcset);
      const sizes = img.getAttribute('sizes');
      if (sizes) overlayImg.setAttribute('sizes', sizes);
      overlayImg.setAttribute('alt', captionText);
      if (overlayCaption) overlayCaption.textContent = captionText;
      currentIndex = idx;
    }
  }

  function openLightboxByIndex(idx) {
    showIndex(idx);
    if (!overlay) return;
    overlay.setAttribute('data-open', 'true');
    overlay.setAttribute('aria-hidden', 'false');
    document.addEventListener('keydown', onKeyDown);
    // Try to enter Fullscreen (requires user gesture)
    try {
      if (overlay.requestFullscreen) overlay.requestFullscreen();
      // @ts-ignore - Safari prefix
      else if (overlay.webkitRequestFullscreen) overlay.webkitRequestFullscreen();
    } catch (err) {
      console.debug('[Lightbox] fullscreen request failed or unsupported', err);
    }
  }

  function closeLightbox() {
    if (!overlay) return;
    overlay.setAttribute('data-open', 'false');
    overlay.setAttribute('aria-hidden', 'true');
    document.removeEventListener('keydown', onKeyDown);
    // Exit Fullscreen if active
    try {
      if (document.fullscreenElement) {
        if (document.exitFullscreen) document.exitFullscreen();
        // @ts-ignore - Safari prefix
        else if (document.webkitExitFullscreen) document.webkitExitFullscreen();
      }
    } catch (err) {
      console.debug('[Lightbox] fullscreen exit failed or unsupported', err);
    }
  }

  function onKeyDown(e) {
    if (e.key === 'Escape') closeLightbox();
    if (e.key === 'ArrowRight') goNext();
    if (e.key === 'ArrowLeft') goPrev();
  }

  function goNext() { if (figures.length) showIndex(currentIndex + 1); }
  function goPrev() { if (figures.length) showIndex(currentIndex - 1); }

  document.addEventListener('click', (e) => {
    const target = e.target;
    if (!target || typeof target.closest !== 'function') return;

    const fig = target.closest('figure.photo');
    if (fig) {
      const idx = figures.findIndex((f) => f === fig);
      if (idx !== -1) openLightboxByIndex(idx);
      return;
    }
    if (target.matches?.('[data-close], .lightbox')) {
      closeLightbox();
      return;
    }
  });

  if (nextBtn) nextBtn.addEventListener('click', (e) => { e.stopPropagation(); goNext(); });
  if (prevBtn) prevBtn.addEventListener('click', (e) => { e.stopPropagation(); goPrev(); });
</script>
